name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run flake8
        run: |
          flake8 . --exclude=env,main_app/migrations,main_app/apps.py --count --select=E9,F63,F7,F82 --show-source --statistics --max-complexity=10 --max-line-length=127

      - name: Run pylint
        run: |
          pylint main_app --ignore=env,migrations,main_app/apps.py --disable=C0111,C0115,C0116,R0903 --max-line-length=127 --load-plugins pylint_django

  test:
      runs-on: ubuntu-latest
      needs: lint
      services:
        postgres:
          image: postgres:latest
          env:
            POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
            POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          ports:
            - 5432:5432

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Python
          uses: actions/setup-python@v3
          with:
            python-version: '3.12'

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Wait for Postgres to be ready
          run: |
            until pg_isready -h localhost -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}; do
              echo "Waiting for Postgres to be ready..."
              sleep 1
            done

        - name: Run database migrations
          env:
            POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
            POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            DATABASE_HOST: ${{ secrets.DATABASE_TEST_HOST }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          run: |
            python manage.py migrate

        - name: Run tests
          env:
            POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
            POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            DATABASE_HOST: ${{ secrets.DATABASE_TEST_HOST }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            AFRICAS_TALKING_USERNAME: ${{ secrets.AFRICAS_TALKING_USERNAME }}
            AFRICAS_TALKING_API_KEY: ${{ secrets.AFRICAS_TALKING_API_KEY }}
          run: |
            python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install EB CLI
        run: |
          pip install awsebcli

      # Initialize Elastic Beanstalk environment
      - name: Initialize Elastic Beanstalk (EB CLI)
        run: |
          eb init -p "64bit Amazon Linux 2023 v4.1.4 running Python 3.11" ${{ secrets.AWS_APPLICATION_NAME }} \
          --region ${{ secrets.AWS_REGION }}

      # Deploy to Elastic Beanstalk
      - name: Deploy to Elastic Beanstalk
        run: |
          eb deploy ${{ secrets.AWS_ENVIRONMENT_NAME }}

      # Run database migrations
      - name: Run makemigrations and migrate
        run: |
          eb ssh ${{ secrets.AWS_ENVIRONMENT_NAME }} --command "source /var/app/venv/*/bin/activate && python manage.py makemigrations && python manage.py migrate"
